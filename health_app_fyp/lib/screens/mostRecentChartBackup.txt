// ignore_for_file: empty_statements
import 'dart:ui' as ui;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:syncfusion_flutter_sliders/sliders.dart';
import 'package:visibility_detector/visibility_detector.dart';
import 'package:syncfusion_flutter_core/theme.dart';

// class ChartSlider extends StatefulWidget {
//   @override
//     _ChartState createState() => _ChartState();
// }

// class _ChartState extends State<ChartSlider> {
//   final Stream<QuerySnapshot> _usersStream = FirebaseFirestore.instance.collection('users').snapshots();

class ChartSlider extends StatefulWidget {
  const ChartSlider({Key? key}) : super(key: key);

  static String id = 'chartSlider';

  // ignore: use_key_in_widget_constructors

  @override
  _ChartState createState() => _ChartState();
}

class _ChartState extends State<ChartSlider> {
  //final Stream<QuerySnapshot> _usersDataStream = FirebaseFirestore.instance.collection('UserData').snapshots();
  //String uid = FirebaseAuth.instance.currentUser!.uid;
//Stream documentStream = FirebaseFirestore.instance.collection('UserData').doc().snapshots();

  @override
  void initState() {
    //getbmiScore();
    //asyncMethod();
    super.initState();

    setState(() {});
  }

//   @override
// void initState() {
//   super.initState();
//   asyncMethod();		// async is not allowed in initState()
// }

  void asyncMethod(bool isVisible) async {
    await getbmiScore();
    // await getbmiScore();
    // ....
  }

  double gotbmiScore = 0;
  double bmiScore = 0;

  // final GlobalKey dividerKey = GlobalKey();
  // final GlobalKey thumbKey = GlobalKey();
  // final GlobalKey tickKey = GlobalKey();
  // final double _min = 0.0;
  final double _max = 100.0;
  double _value = 60.0;

  Future<double> getbmiScore() async {
    String Exc = "Error";

    try {
      final bmiData = await FirebaseFirestore.instance
          .collection('BMI')
          .orderBy("bmiTime")
          .limitToLast(1)
          .where('userID', isEqualTo: FirebaseAuth.instance.currentUser!.uid)
          .get();
      for (var name in bmiData.docs) {
        print(name.data());
        bmiScore = bmiData.docs[0].get("bmiScore");
        //print(text1);
        double gotbmiScore = bmiScore;
        print(gotbmiScore);
        RangeValues values = RangeValues(bmiScore, bmiScore);

        setState(() {
          gotbmiScore = bmiScore;
        });
        return gotbmiScore;
      }

      return bmiScore;
    } catch (Exc) {
      print(Exc);
      rethrow;
    }
  }

  @override
  Widget build(BuildContext context) //=> Scaffold( {
  {
    return VisibilityDetector(
        key: Key(ChartSlider.id),
        onVisibilityChanged: (VisibilityInfo info) {
          bool isVisible = info.visibleFraction != 0;
          asyncMethod(isVisible);
        },
        child: Scaffold(
            appBar: AppBar(
              title: const Text('BMI'),
              elevation: 0,
            ),
            body: Container(
                width: MediaQuery.of(context).size.width,
                height: MediaQuery.of(context).size.height,
                decoration: BoxDecoration(
                    gradient: LinearGradient(
                        // colors: [Colors.red, Colors.white, Colors.red],
                        colors: [
                      Colors.red,
                      Colors.blue,
                      // Colors.orange,
                    ],
                        begin: Alignment.topCenter,
                        end: Alignment.bottomCenter)),
                child: Center(
                    child: Padding(
                        padding: const EdgeInsets.all(20),
                        child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: <Widget>[
                              // const Text(
                              //   "Your BMI is : ",
                              //   style: TextStyle(
                              //       fontSize: 20,
                              //       fontWeight: FontWeight.bold,
                              //       color: Colors.black),
                              // ),
                              SizedBox(
                                height: 75,
                                child: Text(
                                  "Your BMI Score is : " +
                                      bmiScore.toStringAsFixed(1),
                                  style: const TextStyle(
                                      fontSize: 20,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.white),
                                ),
                              ),
                              SizedBox(
                                  height: 10,
                                  child: SfSliderTheme(
                                    data: SfSliderThemeData(

                                      
                                      activeTrackColor: Colors.green,
                                      inactiveTrackColor: Colors.blue,
                                      overlayColor: Colors.transparent,
                                    ),
                                    child: SfSlider(
                                      min: 0,
                                      max: 100,
                                      value: bmiScore,
                                      interval: 20.0,
                                      showLabels: true,
                                      showTicks: true,
                                      // trackShape: _SfTrackShape(0, 100),
                                      // thumbShape: _SfThumbShape(_min, _max),

                                      onChanged:
                                          // null
                                          (bmiScore) {
                                        setState(() {
                                          bmiScore = bmiScore;
                                        });
                                      },
                                    ),

                                    //  (dynamic _value) {
                                    //   setState(() {
                                    //     _value = bmiScore;
                                    //   });
                                    // },
                                  )),
                              //             columnSpacing40,
                              //             title('Divider'),
                              //             DividerCustomizedSlider(dividerKey),
                              //             columnSpacing40,
                              //             ThumbCustomizedSlider(thumbKey),
                              //             title('Tick'),
                              //             columnSpacing10,
                              //             TickCustomizedSlider(tickKey),
                              //           ]));
                              // }

                              //  SfSliderTheme(
                              //   data: SfSliderThemeData(
                              //       tooltipBackgroundColor: Colors.blue),
                              //   child: SfSlider(
                              //     min: 0,
                              //     max: 30,
                              //     showLabels: true,
                              //     interval: 5,
                              //     // dateFormat: DateFormat.y(),
                              //     labelPlacement: LabelPlacement.betweenTicks,
                              //     //dateIntervalType: DateIntervalType.values,
                              //     showTicks: true,
                              //     value: bmiScore,
                              //     onChanged: null,

                              //     enableTooltip: true,
                              //     shouldAlwaysShowTooltip: true,

                              // tooltipTextFormatterCallback:
                              //     (dynamic actualLabel,
                              //         String formattedText) {
                              //   return DateFormat.yMMM().format(actualLabel);
                              // }
                              // ,

                              //  SfSlider(
                              //   showLabels: true,
                              //   min: 10,
                              //   max: 40,
                              //   interval: 5,

                              //   value: bmiScore,
                              //   // value: 30,

                              //   showTicks: true,
                              //   onChanged: null,
                              // ),

                              // child: SliderTheme(
                              //   data: SliderTheme.of(context).copyWith(
                              //     trackHeight: 10.0,
                              //     trackShape: const RoundedRectSliderTrackShape(),
                              //     activeTrackColor: Colors.red,
                              //     inactiveTrackColor: Colors.red,
                              //     thumbShape: const RoundSliderThumbShape(
                              //       enabledThumbRadius: 14.0,
                              //       pressedElevation: 8.0,
                              //     ),
                              //     thumbColor: Colors.red,
                              //     overlayColor: Colors.blue.withOpacity(0.10),
                              //     overlayShape: RoundSliderOverlayShape(
                              //         overlayRadius: 32.0),
                              //     tickMarkShape: RoundSliderTickMarkShape(),
                              //     activeTickMarkColor: Colors.blueAccent,
                              //     inactiveTickMarkColor: Colors.white,
                              //     valueIndicatorShape:
                              //         PaddleSliderValueIndicatorShape(),
                              //     valueIndicatorColor: Colors.blue,
                              //     valueIndicatorTextStyle: TextStyle(
                              //       color: Colors.white,
                              //       fontSize: 20.0,
                              //     ),
                              //   ),
                              //   child: Slider(
                              //     min: 0.0,
                              //     max: 150.0,
                              //     value: bmiScore,
                              //     divisions: 3,
                              //     label: '${bmiScore.toStringAsFixed(1)}',
                              //     onChanged:
                              //         // null
                              //         (bmiScore) {
                              //       setState(() {
                              //         bmiScore = bmiScore;
                              //       });
                              //     },
                              //   ),
                              // )
                            ]))))));
  }
}

void callThisMethod(bool isVisible) {
  debugPrint('_HomeScreenState.callThisMethod: isVisible: ${isVisible}');
}

class _SfTrackShape extends SfTrackShape {
  // _SfTrackShape(dynamic min, dynamic max) {
  //   this.min = (min.runtimeType == DateTime
  //       ? min.millisecondsSinceEpoch.toDouble()
  //       : min) as double;
  //   this.max = (max.runtimeType == DateTime
  //       ? max.millisecondsSinceEpoch.toDouble()
  //       : max) as double;
  // }

  late double min;
  late double max;
  double? trackIntermediatePos;

  @override
  void paintSlider(PaintingContext context, Offset offset, Offset? thumbCenter,
      Offset? startThumbCenter, Offset? endThumbCenter,
      {required RenderBox parentBox,
      required SfSliderThemeData themeData,
      SfRangeValues? currentValues,
      dynamic currentValue,
      required Animation<double> enableAnimation,
      required Paint? inactivePaint,
      required Paint? activePaint,
      required TextDirection textDirection}) {
    final Rect trackRect = getPreferredRect(parentBox, themeData, offset);
    final double actualValue = currentValue;
    final double actualValueInPercent =
        ((actualValue - min) * 100) / (max - min);
    trackIntermediatePos = _getTrackIntermediatePosition(trackRect);

    // low volume track.
    final Paint trackPaint = Paint();
    trackPaint.color =
        actualValueInPercent <= 80.0 ? Colors.green : Colors.blue;
    final Rect lowVolumeRect = Rect.fromLTRB(
        trackRect.left, trackRect.top, thumbCenter!.dx, trackRect.bottom);
    context.canvas.drawRect(lowVolumeRect, trackPaint);

    if (actualValueInPercent <= 80.0) {
      trackPaint.color = Colors.green.withOpacity(0.40);
      final Rect lowVolumeRectWithLessOpacity = Rect.fromLTRB(thumbCenter.dx,
          trackRect.top, trackIntermediatePos!, trackRect.bottom);
      context.canvas.drawRect(lowVolumeRectWithLessOpacity, trackPaint);
    }

    trackPaint.color = Colors.blue.withOpacity(0.40);
    final double highTrackLeft =
        actualValueInPercent >= 80.0 ? thumbCenter.dx : trackIntermediatePos!;
    final Rect highVolumeRectWithLessOpacity = Rect.fromLTRB(highTrackLeft,
        trackRect.top, trackRect.width + trackRect.left, trackRect.bottom);
    context.canvas.drawRect(highVolumeRectWithLessOpacity, trackPaint);
  }

  double _getTrackIntermediatePosition(Rect trackRect) {
    final double actualValue = ((80 * (max - min)) + min) / 100;
    return (((actualValue - min) / (max - min)) * trackRect.width) +
        trackRect.left;
  }
}

class _SfThumbShape extends SfThumbShape {
  _SfThumbShape(dynamic min, dynamic max) {
    this.min = (min.runtimeType == DateTime
        ? min.millisecondsSinceEpoch.toDouble()
        : min) as double;
    this.max = (max.runtimeType == DateTime
        ? max.millisecondsSinceEpoch.toDouble()
        : max) as double;
  }

  late double min;
  late double max;

  @override
  void paintSlider(PaintingContext context, Offset center,
      {required RenderBox parentBox,
      required RenderBox? child,
      required SfSliderThemeData themeData,
      SfRangeValues? currentValues,
      dynamic currentValue,
      required Paint? paint,
      required Animation<double> enableAnimation,
      required TextDirection textDirection,
      required SfThumb? thumb}) {
    final double actualValue = (currentValue.runtimeType == DateTime
        ? currentValue.millisecondsSinceEpoch.toDouble()
        : currentValue) as double;

    final double actualValueInPercent =
        ((actualValue - min) * 100) / (max - min);

    paint = Paint();
    paint.color = actualValueInPercent <= 80 ? Colors.green : Colors.blue;

    super.paint(context, center,
        parentBox: parentBox,
        themeData: themeData,
        currentValue: currentValue,
        paint: paint,
        enableAnimation: enableAnimation,
        textDirection: ui.TextDirection.rtl,
        thumb: thumb,
        child: child);
  }
}
