import 'dart:html';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:health_app_fyp/model/user_model.dart';
import 'package:charts_flutter/flutter.dart' as charts;

class Profile extends StatefulWidget {
  //Generates the Data to be displayed
   late List<charts.Series<UserModel, String>> _seriesBarData;
   late List<UserModel> myData;

  
  _generateData(myData) {
    _seriesBarData.add(charts.Series(
        domainFn: (UserModel users, _) => users.bmi.toString(),
        measureFn: (UserModel users, _) => users.height,
        //colorFn: (UserModel users,_)=> charts.ColorUtil.fromDartColor(users.colorVal)
        id: 'User',
        data: myData,
        labelAccessorFn: (UserModel row, _) => "${row.bmi}"));
  }

  @override
  Widget build(BuildContext context) => Scaffold(
        appBar: AppBar(title: Text('Profile')),

        body: buildBody(context), //This method gets data from FireStore
      );

  Widget buildChart(BuildContext context, List<UserModel> users) {
    myData = users;
    _generateData(myData); //Creating data

    return Padding(
      padding: EdgeInsets.all(8.0),
      child: Container(
        child: Center(
          child: Column(
            children: <Widget>[
              Text(
                'Users BMI',
                style: TextStyle(fontSize: 24.0, fontWeight: FontWeight.bold),
              ),
              SizedBox(
                height: 10.0,
              ), //For Spacing
              //Now comes the chart
              Expanded(
                  child: charts.BarChart(
                _seriesBarData, animate: true,
                animationDuration: Duration(seconds: 5),
                //seriesBarData contains all the values ^ At the top (X and Y axis)
              ))
            ],
          ),
        ),
      ),
    );
  }

//This method gets the data from FireStore
  Widget buildBody(context) {
    return StreamBuilder<QuerySnapshot> //Created Query Snapshot
        (
        stream: FirebaseFirestore.instance
            .collection('users')
            .snapshots(), //Set the stream to our user data
        builder: (context, snapshot) {
//If it is empty
          if (!snapshot.hasData) {
            return LinearProgressIndicator();
          } else {
            //Make a list and pass it to the buildchart method
            List<UserModel> users = snapshot.data!.docs
                .map((documentSnapshot) =>
                    UserModel.fromMap(documentSnapshot.data))
                .toList();
            return buildChart(context, users);
          }
        });
  }

  @override
  State<StatefulWidget> createState() {
    // TODO: implement createState
    throw UnimplementedError();
  }
}
