import 'dart:async';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_barcode_scanner/flutter_barcode_scanner.dart';
import 'package:flutter_material_pickers/helpers/show_number_picker.dart';
import 'package:health_app_fyp/BarcodeScanner/scan_database.dart';
import 'package:health_app_fyp/OpenFoodFacts/methods.dart';
import 'package:intl/intl.dart';
import 'dart:convert';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';
import 'package:http/http.dart' as http;
import 'package:openfoodfacts/model/KnowledgePanel.dart';
import 'package:openfoodfacts/model/NutrientLevels.dart';
import 'package:openfoodfacts/model/ProductResult.dart';
import 'package:openfoodfacts/openfoodfacts.dart';

class BarcodeScanSecond extends StatefulWidget {
  const BarcodeScanSecond({Key? key}) : super(key: key);

  @override
  _BarcodeScanSecondState createState() => _BarcodeScanSecondState();
}

class _BarcodeScanSecondState extends State<BarcodeScanSecond> {
  String _scannedBarcode = 'Unknown';

  DatabaseManager helper = DatabaseManager();
  @override
  void initState() {
    super.initState();
    runBarcodeScanner();
    getFoodName();
  }

  final Stream<QuerySnapshot> foodStream = FirebaseFirestore.instance
      .collection('Food')
      .orderBy("DateTime")
      .limitToLast(1)
      .where('userID', isEqualTo: FirebaseAuth.instance.currentUser!.uid)
      .snapshots();

  final Stream<QuerySnapshot> lastfoodStream = FirebaseFirestore.instance
      .collection('Food')
      .orderBy("DateTime")
      .limitToLast(1)
      .where('userID', isEqualTo: FirebaseAuth.instance.currentUser!.uid)
      .snapshots();

  String? Name;
  String? ingredientsT;
  double? energy_100g_kcal;
  String foodNameTxt = "Item Unknown";
  String uid = FirebaseAuth.instance.currentUser!.uid;

  bool found = false;

  String text1 = '';

  //String showName = '';

  // Platform messages are asynchronous, so we initialize in an async method.
  Future<void> scanBarcode() async {
    String barcodeScanRes;
    //String foodName = " ";
    // Platform messages may fail, so we use a try/catch PlatformException.
    try {
      barcodeScanRes = await FlutterBarcodeScanner.scanBarcode(
          "#ff6666", "Cancel", true, ScanMode.BARCODE);
      // ignore: avoid_print
      print(barcodeScanRes);
    } on PlatformException {
      barcodeScanRes = 'Failed to get platform version.';
    }

    // If the widget was removed from the tree while the asynchronous platform
    // message was in flight, we want to discard the reply rather than calling
    // setState to update our non-existent appearance.
    if (!mounted) return;

    setState(() {
      _scannedBarcode = barcodeScanRes;
      // foodNameTxt = foodName;

      //String barcode = barcodeScanRes;
    });

    String barcode = barcodeScanRes;

    ProductQueryConfiguration configurations = ProductQueryConfiguration(
        barcode,
        language: OpenFoodFactsLanguage.ENGLISH,
        fields: [
          ProductField.NAME,
          ProductField.NUTRIMENTS,
          ProductField.INGREDIENTS_TEXT,
          ProductField.INGREDIENTS,
          ProductField.ADDITIVES,
          ProductField.NUTRIENT_LEVELS,
          ProductField.NUTRIMENT_ENERGY_UNIT,
          ProductField.SERVING_SIZE,
          //ProductField.NUTRIMENT_DATA_PER
        ]);

    ProductResult result = await OpenFoodAPIClient.getProduct(
      configurations,
    );

    if (result.status != 1) {
      print(
          "Error retreiving the product with barcode : $barcode If the barcode number here matches the one on your food item , the item may not exist in the database. Please visit openfoodfacts.org ");

      foodNameTxt = 'error';
      found = false;
      return;

      // ${result.status!.errorVerbose}
    } else {
      found = true;
      String? Name = result.product!.productName;
      //String? Calories = result.product!.nutrimentEnergyUnit;
//foodNameTxt = result.product!.productName!;

      String? ingredientsT = result.product!.ingredientsText;
      // List<Ingredient>? ingredients = result!.product!.ingredients;

      double? energy_100g = result.product!.nutriments!.energy;

      if (energy_100g == null) {
        double? energy_100g_kcal = 1;
      } else {
        double? energy_100g_kcal = energy_100g / 4.184;

        double? servCalorie = result.product!.nutriments!.energyKcal;
        //divide the energy value by 4.184

        // double? energy_100g_kcal = energy_100g! / 4.184;
        //divide the energy value by 4.184
        double? fat_100g = result.product!.nutriments!.fat;

        double? salt_serving = result.product!.nutriments!.saltServing;
        double? fat_serving = result.product!.nutriments!.fatServing;

        String uid = FirebaseAuth.instance.currentUser!.uid;
        DateTime inputTime = (DateTime.now());
//Level? sugars_level = result.product!.nutrientLevels!.levels[NutrientLevels.NUTRIENT_SUGARS];

        print(Name);
        print(ingredientsT);
        print(energy_100g_kcal.toStringAsFixed(2));

        //Name = showName;

        //getTdeeVal();
        getTdeeVal().then((tdee) {
          print(tdee + "result");
          String val = tdee;
          print(Name! + " " + val);

          deductCal(tdee, energy_100g_kcal, uid, inputTime);

          double result = double.parse(tdee);
          double calRemaining = result - energy_100g_kcal;
          print(tdee + " " + "kcal");
          print(calRemaining.toString() + "kcal");
        });

        FirebaseFirestore.instance.collection('Food').add({
          'Food Name': Name,
          'DateTime': inputTime,
          'CaloriesPerServing': servCalorie?.toStringAsFixed(2),
          'userID': uid
        });

        FirebaseFirestore.instance.collection('TempFood').add({
          'Food Name': Name,
          'DateTime': inputTime,
          'CaloriesPerServing': servCalorie?.toStringAsFixed(2),
          'userID': uid
        });

        getFoodName().then((gotFoodName) {
          print(foodNameTxt + "result LINE 143");
          // String val = tdee;
          foodNameTxt = gotFoodName;
          print(foodNameTxt + " GOT FOOD NAME TXT FROM FIRESTORE LINE 145");
        });

        if (foodNameTxt.isNotEmpty) {
          found = true;
        }

        //addToDB(Name, ingredientsT, energy_100g_kcal, inputTime);
      }
    }
    found = true;
  }

  // Future<void> getFoodName() async {
  //   // Platform messages may fail, so we use a try/catch PlatformException.
  //   try {
  //     food = fetchAnItem(_scannedBarcode);
  //     // ignore: avoid_print
  //     print('GET FOOD METHOD CALLED');
  //     // ignore: avoid_print
  //     print((await food));
  //   // ignore: empty_catches
  //   } on PlatformException {
  //   }

  //   // If the widget was removed from the tree while the asynchronous platform
  //   // message was in flight, we want to discard the reply rather than calling
  //   // setState to update our non-existent appearance.
  //   if (!mounted) return;

  //   setState(() {
  //   });
  // }

  Future<void> runBarcodeScanner() async {
    scanBarcode();
  }

  // Future<void> addFood() async {
  //   helper.insertAnItem(await food!);
  //   exitscreen(true);
  // }

  void exitscreen(bool reload) {
    Navigator.pop(context, reload);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(title: const Text('Add Food')),
        body: Builder(builder: (BuildContext context) {
          return Container(
              alignment: Alignment.center,
              child: Flex(
                  direction: Axis.vertical,
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    Card(
                      child: ListTile(
                        title: const Text('Scanned Barcode Value'),
                        subtitle: Text(_scannedBarcode),
                        leading: const Icon(MdiIcons.barcodeScan, size: 50.0),
                      ),
                    ),
                    Card(
                        child: StreamBuilder<QuerySnapshot>(
                      stream: foodStream,
                      builder: (BuildContext context,
                          AsyncSnapshot<QuerySnapshot> snapshot) {
                        // if (found = false) {
                        //   return const Text('Item not found');
                        // }
                        if (snapshot.hasError) {
                          return const Text('Something went wrong');
                        }

                        if (snapshot.connectionState ==
                            ConnectionState.waiting) {
                          return const Text("Loading");
                        }

                        return ListView(
                          shrinkWrap: true,
                          children: snapshot.data!.docs
                              .map((DocumentSnapshot document) {
                            Map<String, dynamic> data =
                                document.data()! as Map<String, dynamic>;
                            return ListTile(
                                leading: const Icon(Icons.fastfood),
                                isThreeLine: true,
                                title: found == false
                                    ? const Text(
                                        "Item not found or doesn't exist in the database")
                                    : Text(
                                        data['Food Name'],
                                        style: const TextStyle(
                                          fontSize: 30.0,
                                          color:
                                              Color.fromARGB(255, 77, 75, 75),
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ),
                                subtitle: found == false
                                    ? const Text("Please try again")
                                    : Text(
                                        data['CaloriesPerServing'] +
                                            " kcal per serving",
                                        style: const TextStyle(
                                          fontSize: 15.0,
                                          color: Colors.black,
                                          fontWeight: FontWeight.w600,
                                        ),
                                      ));
                          }).toList(),
                        );
                      },
                    )),

                    // Column(
                    // mainAxisAlignment: MainAxisAlignment.center,
                    // crossAxisAlignment: CrossAxisAlignment.center,

                    // Card(
                    //   child: ListTile(
                    //     title: Text(foodNameTxt),
                    //     subtitle: const Text(
                    //       ' kcal per serving',
                    //     ),
                    //     trailing: const Icon(MdiIcons.food, size: 50.0),
                    //   ),
                    // ),

                    Card(
                        child: ListTile(
                            title: Text((() {
                                      var a = 1;
                                      if (a == 1) {
                                        return 'serving (';
                                      } else {
                                        return 'servings (';
                                      }
                                      "Servings";
                                    }()) +
                                    "Quantity"
                                //${(snapshot.data!.servingQty).toStringAsFixed(2)} ${snapshot.data!.servingUnit})

                                ),
                            subtitle: const Text("Calories"
                                //'${(snapshot.data!.calories * snapshot.data!.servingConsumed).toString()} Calories')
                                ),
                            leading: SizedBox(
                              width: 40,
                              // ignore: deprecated_member_use
                              child: OutlineButton(
                                borderSide: const BorderSide(
                                    width: 2, color: Colors.blueGrey),
                                onPressed: () => showMaterialNumberPicker(
                                  context: context,
                                  title: "Number of Servings",
                                  maxNumber: 20,
                                  minNumber: 1,
                                  selectedNumber: 1
                                  //  snapshot
                                  //     .data!.servingConsumed
                                  ,
                                  onChanged: (value) => setState(() => null

                                      // <-- Doc ID where data should be updated.

                                      //                               .doc(uid)
                                      //                               .update({'weight': weight});

                                      ),
                                ),
                              ),
                            )))
                  ]));
        }));
  }

//THIS METHOD DOESNT WORK
  // getTDEE() async {
  //   final documents = await FirebaseFirestore.instance
  //       .collection('TDEE')
  //       .where("userID", isEqualTo: FirebaseAuth.instance.currentUser!.uid)
  //       .get();
  //   final userTDEE = documents.docs.first.data;
  //   String sTDEE = userTDEE.toString();
  //   print(sTDEE);
  //   return sTDEE;
  // }

  Future<String> getTdeeVal() async {
    String Exc = "Error";

    try {
      final tdeevals = await FirebaseFirestore.instance
          .collection('TDEE')
          .limit(1)
          .where("userID", isEqualTo: uid)
          .get();
      for (var tdeeval in tdeevals.docs) {
        print(tdeeval.data());
        text1 = tdeevals.docs[0].get("tdee");
        //print(text1);
        String tdee = text1.toString();
        print(tdee);

        return tdee;
      }
      return text1;
    } catch (Exc) {
      print(Exc);
      rethrow;
    }
  }

  //THIS METHOD IS FOR GETTING FOOD NAME INTO A STRING
  Future<String> getFoodName() async {
    String Exc = "Error";

    try {
      final foodname = await FirebaseFirestore.instance
          .collection('Food')
          .orderBy("DateTime")
          .limitToLast(1)
          .where('userID', isEqualTo: FirebaseAuth.instance.currentUser!.uid)
          .get();
      for (var name in foodname.docs) {
        print(name.data());
        foodNameTxt = foodname.docs[0].get("Food Name");
        //print(text1);
        String gotFoodName = foodNameTxt.toString();
        print(gotFoodName);

        return gotFoodName;
      }
      return foodNameTxt;
    } catch (Exc) {
      print(Exc);
      rethrow;
    }
  }

  getNewCALS() async {
    final documents = await FirebaseFirestore.instance
        .collection('CalorieCount')
        .where("userID", isEqualTo: FirebaseAuth.instance.currentUser!.uid)
        .get();
    final userNewCals = documents.docs.first.data();
    String userCals = userNewCals.toString();
    double returnedCals = double.parse(userCals);
    print(userCals + " getNewCals method successful ");
    return returnedCals;
  }

  void deductCal(String tdee, double energy_100g_kcal, uid, inputTime) {
    double result = double.parse(tdee);
    double calRemaining = result - energy_100g_kcal;
    print(tdee + " " + "kcal");
    print(calRemaining.toString() + "kcal deductCal method successful ");

    // FirebaseFirestore.instance.collection('CalorieCount').doc(uid).set({
    //   'Date/Time': inputTime,
    //   'Calories remaining': calRemaining,
    //   'userID': uid

    //   //This is where to do calculation and update firebase
    // });
    // CollectionReference NEWtdee = FirebaseFirestore.instance
    //         .collection('TDEE')
    //         .where('userID', isEqualTo: FirebaseAuth.instance.currentUser!.uid)
    //     as CollectionReference<Object?>;

    // Future<void> updateTdee() {
    //   return NEWtdee.doc()
    //       .update({'tdee': calRemaining - energy_100g_kcal})
    //       .then((value) => print("User Updated"))
    //       .catchError((error) => print("Failed to update user: $error"));
    // }

    // FirebaseFirestore.instance.collection('CalorieCount').add({

    //     'Calories remaining': calRemaining,
    //     'Date/Time': DateTime.now(),
    //     'userID': uid
    //     //This is where to do calculation and update firebase

    // });
    // getNewCALS();

    // getNewCALS().then((returnedCals) {
    //   print(returnedCals);
    //   double finalCals = returnedCals - energy_100g_kcal;
    //   print(finalCals);

    // FirebaseFirestore.instance
    //     .collection('CalorieCount').where('userID', isEqualTo: FirebaseAuth.instance.currentUser!.uid)
    //     .limit(1)
    //     .({'tdee': calRemaining})
    //     .then((value) => print("Cal TDEE Updated"))
    //     .catchError((error) => print("Failed to update user: $error"));

    // FirebaseFirestore.instance.collection('CalorieCount').doc(uid).set({
    //   'Date/Time': inputTime,
    //   'Calories remaining': -energy_100g_kcal,
    //   'userID': uid
    //   //This is where to do calculation and update firebase
    // });
  }
}

//   void addToDB(String? name, String? ingredientsT, double energy_100g_kcal, String inputTime) {}
// }
  // ),
//                     ),
//                     Column(
//                         mainAxisAlignment: MainAxisAlignment.center,
//                         crossAxisAlignment: CrossAxisAlignment.center,
//                         children: [
//                           Card(
//                             child: ListTile(
//                               title: Text(""),
//                               subtitle: Text(
//                                 ' kcal per serving',
//                               ),
//                               trailing: const Icon(MdiIcons.food, size: 50.0),
//                             ),
//                           ),
//                           Card(
//                             child: ListTile(
//                               title: Text((() {
//                                         var a = 1;
//                                         if (a == 1) {
//                                           return 'serving (';
//                                         } else {
//                                           return 'servings (';
//                                         }
//                                         // "Servings";
//                                       }()) +
//                                       "Quantity"
//                                   //${(snapshot.data!.servingQty).toStringAsFixed(2)} ${snapshot.data!.servingUnit})

//                                   ),
//                               subtitle: const Text("Calories"
//                                   //'${(snapshot.data!.calories * snapshot.data!.servingConsumed).toString()} Calories')
//                                   ),
//                               leading: SizedBox(
//                                   width: 40,
//                                   // ignore: deprecated_member_use
//                                   child: OutlineButton(
//                                     borderSide: const BorderSide(
//                                         width: 2, color: Colors.blueGrey),
//                                     onPressed: () => showMaterialNumberPicker(
//                                       context: context,
//                                       title: "Number of Servings",
//                                       maxNumber: 20,
//                                       minNumber: 1,
//                                       selectedNumber: 2
//                                       //  snapshot
//                                       //     .data!.servingConsumed
//                                       ,
//                                       onChanged: (value) => setState(() => null
//                                           // snapshot.data!
//                                           //     .servingConsumed
//                                           //     = value
//                                           ),
//                                     ),
//                                     child: Text("Howiye"
//                                         // snapshot
//                                         //   .data!.servingConsumed
//                                         //   .toString()

//                                         ),
//                                   )),
//                             ),
//                           ),
//                           ButtonBar(
//                             children: [
//                               // ignore: deprecated_member_use
//                               FlatButton(
//                                 onPressed: () => exitscreen(false),
//                                 child: const Text("Go Back"),
//                               ),
//                               // ignore: deprecated_member_use
//                               RaisedButton(
//                                 onPressed: () => exitscreen(true),
//                                 //addFood()
//                                 //                              FirebaseFirestore.instance.collection('Food').add({
//                                 //   'Food Name': Name,
//                                 //   'Date/Time': inputTime,
//                                 //   'Calories per 100g': energy_100g_kcal?.toStringAsFixed(2),
//                                 //   'userID': uid
//                                 // });

//                                 child: const Text("Add To Total"),
//                               ),
//                             ],
//                             alignment: MainAxisAlignment.center,
//                           )
//                         ])
//                   ]));
//         }));
//   }
// }

//                   //         } else {
//                   //           return Column(children: [
//                   //             const Text("Food Not Found or an error occured"),
//                   //             ButtonBar(
//                   //               children: [
//                   //                 // ignore: deprecated_member_use
//                   //                 FlatButton(
//                   //                   onPressed: () => exitscreen(false),
//                   //                   child: const Text("Go Back"),
//                   //                 ),
//                   //                 // ignore: deprecated_member_use
//                   //                 RaisedButton(
//                   //                     onPressed: () => runBarcodeScanner(),
//                   //                     child: const Text("Retry Scan")),
//                   //               ],
//                   //               alignment: MainAxisAlignment.center,
//                   //             )
//                   //           ]);
//                   //         }
//                   //       } else if (snapshot.hasError) {
//                   //         return Column(children: [
//                   //           Text("${snapshot.error}"),
//                   //           ButtonBar(
//                   //             children: [
//                   //               // ignore: deprecated_member_use
//                   //               FlatButton(
//                   //                 onPressed: () => exitscreen(false),
//                   //                 child: const Text("Go Back"),
//                   //               ),
//                   //               // ignore: deprecated_member_use
//                   //               RaisedButton(
//                   //                   onPressed: () => runBarcodeScanner(),
//                   //                   child: const Text("Retry Scan")),
//                   //             ],
//                   //             alignment: MainAxisAlignment.center,
//                   //           )
//                   //         ]);
//                   //       }

//                   //       return const CircularProgressIndicator();
//                   //     },
//                   //   ),
//                   // ]));
// //         }));
// //   }
// // }

















// import 'dart:async';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:flutter/material.dart';
// import 'package:flutter/services.dart';
// import 'package:flutter_barcode_scanner/flutter_barcode_scanner.dart';
// import 'package:health_app_fyp/BarcodeScanner/scan_database.dart';
// import 'package:intl/intl.dart';
// import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';

// import 'package:openfoodfacts/openfoodfacts.dart';

// class BarcodeScanSecond extends StatefulWidget {
//   const BarcodeScanSecond({Key? key}) : super(key: key);

//   @override
//   _BarcodeScanSecondState createState() => _BarcodeScanSecondState();
// }

// class _BarcodeScanSecondState extends State<BarcodeScanSecond> {
//   String _scannedBarcode = 'Unknown';

//   DatabaseManager helper = DatabaseManager();
//   @override
//   void initState() {
//     super.initState();
//     runBarcodeScanner();
//   }

//   String? Name;
//   String? ingredientsT;
//   double? energy_100g_kcal;
//   String text1 = '';

//   void exitscreen(bool reload) {
//     Navigator.pop(context, reload);
//   }

//   getTDEE() async {
//     final documents = await FirebaseFirestore.instance
//         .collection('TDEE')
//         .where("userID", isEqualTo: FirebaseAuth.instance.currentUser!.uid)
//         .get();
//     final userTDEE = documents.docs.first.data;
//     String sTDEE = userTDEE.toString();
//     print(sTDEE);
//     return sTDEE;
//   }

//   Future<String> getTdeeVal() async {
//     String Exc = "Error";

//     try {
//       final messages = await FirebaseFirestore.instance
//           .collection('TDEE')
//           .limit(1)
//           .where("userID", isEqualTo: FirebaseAuth.instance.currentUser!.uid)
//           .get();
//       for (var message in messages.docs) {
//         print(message.data());
//         text1 = messages.docs[0].get("tdee");
//         //print(text1);
//         String tdee = text1.toString();
//         print(tdee);

//         return tdee;
//       }
//       return text1;
//     } catch (Exc) {
//       print(Exc);
//       rethrow;
//     }
//   }

//   void deductCal(String tdee, double energy_100g_kcal, uid, inputTime) {
//     double result = double.parse(tdee);
//     double calRemaining = result - energy_100g_kcal;
//     print(tdee + " " + "kcal");
//     print(calRemaining.toString() + "kcal");

//     FirebaseFirestore.instance.collection('CalorieCount').add({
//       'Date/Time': inputTime,
//       'Calories remaining': calRemaining.toStringAsFixed(2),
//       'userID': uid
//       //This is where to do calculation and update firebase
//     });

//     // Platform messages are asynchronous, so we initialize in an async method.
//     Future<void> scanBarcode() async {
//       String barcodeScanRes;
//       // Platform messages may fail, so we use a try/catch PlatformException.
//       try {
//         barcodeScanRes = await FlutterBarcodeScanner.scanBarcode(
//             "#ff6666", "Cancel", true, ScanMode.BARCODE);
//         // ignore: avoid_print
//         print(barcodeScanRes);
//       } on PlatformException {
//         barcodeScanRes = 'FAILED';
//       }

//       // If the widget was removed from the tree while the asynchronous platform
//       // message was in flight, we want to discard the reply rather than calling
//       // setState to update our non-existent appearance.
//       if (!mounted) return;

//       setState(() {
//         _scannedBarcode = barcodeScanRes;

//         String barcode = barcodeScanRes;
//       });

//       String barcode = barcodeScanRes;

//       ProductQueryConfiguration configurations = ProductQueryConfiguration(
//           barcode,
//           language: OpenFoodFactsLanguage.ENGLISH,
//           fields: [
//             ProductField.NAME,
//             ProductField.NUTRIMENTS,
//             ProductField.INGREDIENTS_TEXT,
//             ProductField.INGREDIENTS,
//             ProductField.ADDITIVES,
//             ProductField.NUTRIENT_LEVELS,
//             ProductField.NUTRIMENT_ENERGY_UNIT
//           ]);

//       ProductResult result = await OpenFoodAPIClient.getProduct(
//         configurations,
//       );

//       if (result.status != 1) {
//         print(
//             "Error retreiving the product with barcode : $barcode If the barcode number here matches the one on your food item , the item may not exist in the database. Please visit openfoodfacts.org ");
//         return;

//         // ${result.status!.errorVerbose}
//       } else {
//         String? Name = result.product!.productName;
//         //String? Calories = result.product!.nutrimentEnergyUnit;

//         String? ingredientsT = result.product!.ingredientsText;
//         // List<Ingredient>? ingredients = result!.product!.ingredients;

//         double? energy_100g = result.product!.nutriments!.energy;

//         if (energy_100g == null) {
//           double? energy_100g_kcal = 1;
//         } else {
//           double? energy_100g_kcal = energy_100g / 4.184;
//           //divide the energy value by 4.184

//           // double? energy_100g_kcal = energy_100g! / 4.184;
//           //divide the energy value by 4.184
//           double? fat_100g = result.product!.nutriments!.fat;

//           double? salt_serving = result.product!.nutriments!.saltServing;
//           double? fat_serving = result.product!.nutriments!.fatServing;

//           String uid = FirebaseAuth.instance.currentUser!.uid;
//           String inputTime =
//               DateFormat('yyyy-MM-dd KK:mm:ss a').format(DateTime.now());
// //Level? sugars_level = result.product!.nutrientLevels!.levels[NutrientLevels.NUTRIENT_SUGARS];

//           //var usersTDEE = await getTDEE();

//           //getTdeeVal(text1);
//           getTdeeVal().then((tdee) {
//             print(tdee + "result");
//             String val = tdee;
//             print(Name! + " " + val);

//             deductCal(tdee, energy_100g_kcal, uid, inputTime);

//             //   double result = double.parse(tdee);
//             //   double calRemaining = result - energy_100g_kcal;
//             //   print(tdee + " " + "kcal");
//             //   print(calRemaining.toString() + "kcal");

//             //    FirebaseFirestore.instance.collection('CalorieCount').add({

//             //   'Date/Time': inputTime,
//             //   'Calories remaining': calRemaining.toStringAsFixed(2),
//             //   'userID': uid
//             //   //This is where to do calculation and update firebase
//             // });

//             print("Got TDEE");
//             //print(tdee);

//             print(Name);
//             print(ingredientsT);
//             print(energy_100g_kcal.toStringAsFixed(2));

//             FirebaseFirestore.instance.collection('Food').add({
//               'Food Name': Name,
//               'Date/Time': inputTime,
//               'Calories per 100g': energy_100g_kcal.toStringAsFixed(2),
//               'userID': uid
//             });
//           });
//         }
//       }

//       Future<void> runBarcodeScanner() async {
//         scanBarcode();

//         @override
//         Widget build(BuildContext context) {
//           return Scaffold(
//               appBar: AppBar(title: const Text('Add Food')),
//               body: Builder(builder: (BuildContext context) {
//                 return Container(
//                     alignment: Alignment.center,
//                     child: Flex(
//                         direction: Axis.vertical,
//                         mainAxisAlignment: MainAxisAlignment.center,
//                         children: <Widget>[
//                           Card(
//                             child: ListTile(
//                               title: const Text('Scanned Barcode Value'),
//                               subtitle: Text(_scannedBarcode),
//                               leading:
//                                   const Icon(MdiIcons.barcodeScan, size: 50.0),
//                             ),
//                           ),
//                         ]));
//               }));
//         }
//       }

//       ;
//       ;
//       ;
//     }
//   }
// }
